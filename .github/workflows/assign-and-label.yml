name: Issue Command Bot

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write
  contents: read  # Added to read CODEOWNERS file

jobs:
  process-command:
    runs-on: ubuntu-latest
    steps:
      - name: Process Commands
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            const commenter = context.payload.comment.user.login;
            const issueNumber = context.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            async function handleLabel(labelName, color, description) {
              try {
                await github.rest.issues.addLabels({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: issueNumber,
                  labels: [labelName]
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: repoOwner,
                    repo: repoName,
                    name: labelName,
                    color: color || "0e8a16",
                    description: description || ""
                  });
                  await github.rest.issues.addLabels({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    labels: [labelName]
                  });
                } else {
                  throw error;
                }
              }
            }

            function parseCommand(comment, cmd) {
              if (!comment?.includes(cmd)) return null;
              const cmdIndex = comment.indexOf(cmd);
              return comment.substring(cmdIndex + cmd.length).trim() || null;
            }

            // Check if commenter is a code owner
            let isCodeOwner = false;
            try {
              const { data: codeownersData } = await github.rest.repos.getContent({
                owner: repoOwner,
                repo: repoName,
                path: '.github/CODEOWNERS',
              });
              const codeownersContent = Buffer.from(codeownersData.content, 'base64').toString();
              const lines = codeownersContent.split('\n');
              const owners = new Set();
              const teams = [];

              for (let line of lines) {
                line = line.trim();
                if (line.startsWith('#') || line === '') continue;
                const parts = line.split(/\s+/);
                for (let i = 1; i < parts.length; i++) { // Skip pattern
                  let owner = parts[i];
                  if (owner.startsWith('@')) {
                    owner = owner.substring(1);
                  }
                  if (owner.includes('/')) {
                    teams.push(owner);
                  } else {
                    owners.add(owner);
                  }
                }
              }

              // Check individual owners
              if (owners.has(commenter)) {
                isCodeOwner = true;
              }

              // Check team memberships
              for (let team of teams) {
                const [org, team_slug] = team.split('/');
                try {
                  const { data } = await github.rest.teams.getMembershipForUserInOrg({
                    org,
                    team_slug,
                    username: commenter
                  });
                  if (data.state === 'active') {
                    isCodeOwner = true;
                    break;
                  }
                } catch (teamError) {
                  if (teamError.status !== 404) {
                    throw teamError;
                  }
                }
              }
            } catch (error) {
              if (error.status !== 404) {
                console.log('Error checking CODEOWNERS:', error);
              }
              // If no CODEOWNERS or error, assume not a code owner
            }

            try {
              if (!isCodeOwner) {
                await github.rest.issues.createComment({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: issueNumber,
                  body: `‚ùå Only code owners can use these commands.`
                });
                return;
              }

              if (comment?.includes("/assign")) {
                try {
                  let assignee = commenter; 
                  
                  const assigneeParam = parseCommand(comment, "/assign");
                  if (assigneeParam && assigneeParam.startsWith("@")) {
                    assignee = assigneeParam.substring(1).trim();
                  }
                  
                  await github.rest.issues.addAssignees({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    assignees: [assignee]
                  });
                  
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚úÖ Issue assigned to @${assignee}`
                  });
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to assign: ${error.message} !`
                  });
                }
              }

              if (comment?.includes("/close")) {
                try {
                  await github.rest.issues.update({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    state: "closed",
                    state_reason: "completed"
                  });
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to close issue: ${error.message} !`
                  });
                }
              }

              if (comment?.includes("/reopen")) {
                try {
                  await github.rest.issues.update({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    state: "open"
                  });
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to reopen issue: ${error.message} !`
                  });
                }
              }

              if (comment?.includes("/label")) {
                try {
                  const labelName = parseCommand(comment, "/label");
                  if (labelName) {
                    await handleLabel(labelName, "0e8a16");
                  }
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to add label: ${error.message} !`
                  });
                }
              }

              if (comment?.includes("/help")) {
                try {
                  await handleLabel("help wanted", "008672", "Extra attention is needed");
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to add help label: ${error.message} !`
                  });
                }
              }

              if (comment?.includes("/needs-triage")) {
                try {
                  await handleLabel("needs-triage", "d73a4a", "This issue needs triage");
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to add triage label: ${error.message} !`
                  });
                }
              }
              
              if (comment?.includes("/cc")) {
                try {
                  const mentionedUsers = comment.split("/cc")[1]
                    ?.trim()
                    .split(/[\s,]+/)
                    .filter(user => user.startsWith('@'))
                    .map(user => user.substring(1).trim());
                  
                  if (!mentionedUsers || mentionedUsers.length === 0) {
                    throw new Error("No valid users mentioned to CC");
                  }
                  
                  const mentionText = mentionedUsers.map(user => `@${user}`).join(', ');
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `üëã ${mentionText} - you've been mentioned in this issue by @${commenter}`
                  });
                } catch (error) {
                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `‚ùå Failed to mention users: ${error.message} !`
                  });
                }
              }

            } catch (error) {
              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                body: `‚ùå ${error.message} !`
              });
            }
